This file is meant to boost and track discussions about potential future language features which may help the description in P4 of ICN forwarding behaviors.

Further inspiration can be taken from past and ongoing discussions of the P4 language design WG, which are tracked at:
https://github.com/p4lang/p4-spec/wiki/LDWG

Let me throw here some initial thoughts:

- calling actions within the parser stage: Rui uses to hash components right in the parser stage, something that was not possible in P4_14.
    This definitely simplifies the code of the ingress pipeline, not sure yet wheter it introduces other benefits.
    A closely related minor (i.e., less urgent) issue seems to be the one discussed in this open thread of the design-WG https://github.com/p4lang/p4-spec/issues/151,
    which has then been converted to a language enhancement.
    
- special types for hashed fields: the processing of NDN packets includes several operations performed on hashed fields (full name for the PIT match, hash of every component for the FIB match).
    This is a feature required by some other protocols too, for example, the first one coming to my mind is the ECMP protocol (which, if I am not mistaken, hashes the 5 tuple:the protocol number, 
    the IP addresses and the TCP/UDP source and destination ports). I am wondering if introducing special types of this form:
    Hashed<size,hash_function,list_of_fields> a
    could eventually ease the description of other parts of the packet processing. For example, would it be possible to have a neater definition to address the device's memories? Or yet,
    would it be possible to use this special type in some sort of more concise MA table definition?
    I should dig into this more, so please take the whole above point with a pinch of salt.


- Rui's argument for "while/for" loops: could you please try to elaborate on this? Detailing the problem and proposing possible solutions (any sort of pseudo-code will be fine).